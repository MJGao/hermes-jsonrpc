option java_package="com.baidu.xspeedpbrpc.core.protocol";
option java_outer_classname="RpcProtocol";

message RpcRequest{
	optional RequestHead requestHead = 1;	// 消息头
	repeated RequestBody requestBody = 2;	// 消息正体
}

message RequestHead{
	optional string from_host = 1;   		//来源机器 
	optional uint32 content_type = 2;  		//
	optional bool connection = 3;			//
	optional string charset = 4;			//用户请求所使用的字符集
	optional string accept_charset = 5;		//可接受的字符集
	optional string create_time = 6;		//创建时间
	optional uint64 log_id = 7;				//日志标识
}

message RequestBody{
	// Sequence ID number, since Netty is asynchronious by nature
    // We need this to implement callbacks. This ID number is only
    // unique to a Netty Channel
    // NOTE: leave the ID out if you don't want any response 
	optional uint64 id = 1;					//会话标识
	optional string version = 2;			//版本
	optional string charset = 3;			//用户请求所使用的字符集
	required string service = 4;			//服务名称
	required uint32 method_id = 5;			//方法名索引
	required bool is_blocking_service = 6;	//是否是同步方法
	optional bytes serialized_request = 7;	//消息正体
}

message RpcResponse{
	optional ResponseHead responseHead = 1;		//消息头
	repeated ResponseBody responseBody = 2;		//消息正体
}

message ResponseHead{
    optional ErrorCode error_code = 3;			//错误
    optional string error_message = 4;			//错误信息
}

message ResponseBody{
	// Request Sequence ID number that this response is
    // "responding" to. This is *required* since we don't
    // send back responses unless a sequence ID was provided
    // (that would be extra traffic not necessary)
	required uint64 id = 1;						//会话标识
	optional bytes serialized_response = 2;		//消息正体
}

// 错误码
enum ErrorCode {

	// Server-side errors
	BAD_REQUEST_DATA = 0; 		// Server received bad request data
	BAD_REQUEST_PROTO = 1; 		// Server received bad request proto
	SERVICE_NOT_FOUND = 2; 		// Service not found on server
	METHOD_NOT_FOUND = 3; 		// Method not found on server
	RPC_ERROR = 4; 				// Rpc threw exception on server
	RPC_FAILED = 5; 			// Rpc failed on server

	// Client-side errors (these are returned by the client-side code)
	INVALID_REQUEST_PROTO = 6; 	// Rpc was called with invalid request proto
	BAD_RESPONSE_PROTO = 7; 	// Server returned a bad response proto
	UNKNOWN_HOST = 8; 			// Could not find supplied host
	IO_READ_ERROR = 9; 			// I/O error while communicating with server
	IO_WRITE_ERROR = 10; 		// I/O error while communicating with server
	IO_ERROR = 11; 				// I/O error while communicating with server
	
	UNKNOWN_ERROR = 13; 		// unknown
}